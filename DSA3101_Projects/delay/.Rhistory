S <- S + exp(-lambda)*(lambda^X)/factorial(X)
}
return(X)
}
orderCost <- function(y) y
G <- function() {
n = 10
p = 0.8
s = 0
for (i in 1:n) {
u = runif(1)
if(u <= p) {
x = 1
} else {
x = 0
}
s = s + x
}
print(s)
}
generateNextArrival <- function(lambda) {
U <- runif[1]
X <- 0
S <- exp(-lambda)
while(U > S) {
X <- X + 1
S <- S + exp(-lambda)*(lambda^X)/factorial(X)
}
return(X)
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, x)
if(w < D) {
## update unmet demand here
lost <<- lost+(D-w)
}
SS[1] <<- SS[1]-w
R <<- R+r*w
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S-SS[1]
EL[2] <<- cur.time+L
}
EL[1] <<- cur.time-log(runif(1))/lambda
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
Cost <<- Cost+orderCost(SS[2])
SS[1] <<- SS[1]+SS[2]
ss[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)               # c(t_0, t_1)
EL[1] <<- generateNextArrival(cur.time, lambda)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H + h*SS[1]*(EL[1] - cur.time)
profit <- R-H-cost
c(profit,lost)
}
r <- 2
h <- 0.25
lambda <- 2.5
L <- 3
T <- 100
s <- 75
S <- 100
generateOneRun(r, h, lambda, L, s, S, T)
y.gen <- function(n){
y = array(0)
for(i in 1:10000){
x = rgamma(10, shape = n, rate = 1/2)
y[i] = mean(x)
}
return(y)
}
hist(y.gen(n = 2), freq = FALSE)
hist(y.gen(n = .5), freq = FALSE)
n <- 10000
t <- 1.5
lambda <- 2-t
X = (−1/lambda)∗sum(log(runif(n, min=0, max=1)))
n <- 10000
t <- 1.5
lambda <- 2-t
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
X
n <- 10
t <- 1.5
lambda <- 2-t
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
X
y.gen <- function(n){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y.gen(n = 2), freq = FALSE)
y.gen <- function(){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y.gen, freq = FALSE)
###################################################
y.gen <- function(i){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y.gen(0), freq = FALSE)
y.gen <- function(i){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y.gen(0), freq = FALSE)
y.gen <- function(n){
y = array(0)
for(i in 1:10000){
x = rgamma(10, shape = n, rate = 1/2)
y[i] = mean(x)
}
return(y)
}
# hist(y.gen(n = 2), freq = FALSE)
hist(y.gen(n = .5), freq = FALSE)
y.gen <- function(i){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y.gen(0), freq = FALSE)
y.gen <- function(n){
y = array(0)
for(i in 1:10000){
x = rgamma(10, n)
y[i] = mean(x)
}
return(y)
}
# hist(y.gen(n = 2), freq = FALSE)
hist(y.gen(n = .5), freq = FALSE)
y <- function(i){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y, freq = FALSE)
y <- function(){
y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
y[i] = X
}
return(y)
}
hist(y(), freq = FALSE)
Y <- function(){
Y = array(0)
n <- 10
t <- 1.5
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
Y[i] = X
}
return(Y)
}
hist(Y(), freq = FALSE)
orig_p
U <- runif(10000)
t <- 1.5
x.vals <- 0:10
orig_p <- dgamma(x.vals, 10, 2-t)
tilted_p <- orig_p*exp(t*x.vals)/((0.4*exp(t)+1-0.4)^(20))
X <- invertDiscreteCdfDirect(U, tilted_p)-1
source("invertDiscreteCdfDirect.R")
# To invert the pmf directly
# Given one uniform draw, this returns one draw from the discrete distribution.
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
U <- runif(10000)
t <- 1.5
x.vals <- 0:10
orig_p <- dgamma(x.vals, 10, 2-t)
tilted_p <- orig_p*exp(t*x.vals)/((0.4*exp(t)+1-0.4)^(20))
X <- invertDiscreteCdfDirect(U, tilted_p)-1
W <- ifelse(X>=16, 1, 0)*((0.4*exp(t)+1-0.4)^(20))/exp(t*X)
mean(W)
orig_p
Y
Y()
tilted_p
W
set.seed(11)
U <- runif(100)
orig_p <- dbinom(0:20, 20, 0.4)
X <- invertDiscreteCdfDirect(U, orig_p) - 1
Y <- ifelse(X >= 16, 1, 0)
orig_p
X
set.seed(111)
t <- 1.5
Y <- Y(t)
Y <- function(t){
Y = array(0)
n <- 10
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
Y[i] = X
}
return(Y)
}
set.seed(111)
hist(Y(1.5), freq = FALSE)
set.seed(111)
t <- 1.5
Y <- Y(t)
W <- ifelse(Y>15, 1, 0)*((1-t/2)^-10)*exp(-t*Y)
mean(W)
mean(W)-0.000007080833
mean(W)-0.0000070808332560626
mean(W)*10^6
###################################################
#                 Question 1(e)                   #
###################################################
Y <- function(t){
Y = array(0)
n <- 10
lambda <- 2-t
for(i in 1:10000){
X <-  (-1/lambda)*sum(log(runif(n, min=0, max=1)))
Y[i] = X
}
return(Y)
}
set.seed(111)
hist(Y(1.5), freq = FALSE)
###################################################
#                 Question 1(g)                   #
###################################################
set.seed(111)
t <- 1.5
Y <- Y(t)
W <- ifelse(Y>15, 1, 0)*((1-t/2)^-10)*exp(-t*Y)
mean(W)
# P(X.15)=7.08e-06 (3sf)
###################################################
#                 Question 2(a)                   #
###################################################
orderCost <- function(y) y
G <- function() {
n <- 10
p <- 0.8
s <- 0
for (i in 1:n) {
u <- runif(1)
if(u <= p) {
x <- 1
} else {
x <- 0
}
s <- s + x
}
return(s)
}
generateNextArrival <- function(lambda) {
U <- runif(1)
X <- 0
S <- exp(-lambda)
while(U > S) {
X <- X + 1
S <- S + exp(-lambda)*(lambda^X)/factorial(X)
}
return(X)
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1]-cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost+(D-w)
}
SS[1] <<- SS[1]-w
R <<- R+r*w
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S-SS[1]
EL[2] <<- cur.time+L
}
EL[1] <<- cur.time-log(runif(1))/lambda
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[1]-cur.time)
cur.time <<- EL[1]
Cost <<- Cost+orderCost(SS[2])
SS[1] <<- SS[1]+SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)               # c(t_0, t_1)
EL[1] <<- generateNextArrival(lambda)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H + h*SS[1]*(EL[1]-cur.time)
profit <- R-H-Cost
c(profit,lost)
}
r <- 2
h <- 0.25
lambda <- 2.5
L <- 3
T <- 100
s <- 75
S <- 100
set.seed(321)
N <- lapply(1:10000, function(x) generateOneRun(r, h, lambda, L, s, S, T))
V <- unlist(lapply(N, function(l) l[[1]]))
W <- unlist(lapply(N, function(l) l[[2]]))
EV <- mean(V)
EW <- mean(W)
sigmaV <- sd(V)
sigmaW <- sd(W)
# 95% CI to check width
V_width <- 2*qnorm(.025,lower.tail=FALSE)*sigmaV/sqrt(10000)
V_width
W_width <- 2*qnorm(.025,lower.tail=FALSE)*sigmaW/sqrt(10000)
W_width
# As width of both E(V) and E(W) are less than $5, E(V)=$961.03 and E(W)=462.
###################################################
#                 Question 2(b)                   #
###################################################
sl <- c(75,100,125)
Sl <- c(100,125,150)
set.seed(321)
r <- 2
h <- 0.25
lambda <- 2.5
L <- 3
T <- 100
for (s in sl){
for (S in Sl){
N <- lapply(1:10000, function(x) generateOneRun(r, h, lambda, L, s, S, T))
EV <- mean(unlist(lapply(N, function(l) l[[1]])))
EW <- mean(unlist(lapply(N, function(l) l[[2]])))
print(paste('s:', s, 'S:', S, 'EV:', EV, 'EW:', EW))
}
}
# Increasing only S (big S) reduces the the mean number of lost orders.
# However, a very large S e.g. S=10000 makes profit negative. When s=75 and
# s=125, E(V) decreased by $88.97 but E(W) decreased by 235.
shiny::runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
library(shiny); runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay/CopyOfapp.R')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay/CopyOfapp.R')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay')
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay/CopyOfapp.R')
list_year3 <- as.character(1989, 1990, 2000, 2001, 2006, 2007)
list_year3 <- as.character(c(1989, 1990, 2000, 2001, 2006, 2007))
list_year3
library(jsonlite)
library(httr)
flask_url <- "http://localhost:1000/"
response <- GET(flask_url, path="query", query=list(mode = "lm", direction="arr", year=2007))
df <- fromJSON(content(response, "text"), simplifyDataFrame = TRUE)
View(response)
ls
View(df)
library(jsonlite)
library(httr)
flask_url <- "http://localhost:1000/coefficients?mode=lm_arr_2007"
response <- GET(flask_url)
df <- fromJSON(content(response, "text"), simplifyDataFrame = TRUE)
flask_url <- "http://localhost:1000/coefficients?mode=dt_arr_2007"
response <- GET(flask_url)
df <- fromJSON(content(response, "text"), simplifyDataFrame = TRUE)
View(df)
library(shiny); runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/dsa3101-2220-04-airline/delay/CopyOfapp.R')
corr(df)
heatmap.2(cbind(df$Variables, df$Variables), trace="n", Colv = NA,
dendrogram = "row", labCol = "", labRow = df$Coefficients, cexRow = 0.75)
library(gplots)
install.packages("gplots")
install.packages('gplots')
library(gplots)
runApp('C:/Users/admin/Dropbox/Apps/GoodNotes 5/Files/Sem 4/DSA3101/delay/CopyOfapp.R')
print(getwd())
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
library(gplots)
heatmap.2(cbind(df$Variables, df$Variables), trace="n", Colv = NA,
dendrogram = "row", labCol = "", labRow = df$Coefficients, cexRow = 0.75)
cbind(df$Variables, df$Variables)
d <- cbind(df$Variables, df$Variables)
View(d)
runApp('app_new.R')
Delayed <- read_csv("pairwise_flights.csv", show_col_types=FALSE)
airports <- read_csv("airports.csv", show_col_types=FALSE)
Delayed <- na.omit(Delayed)
Delayed <- Delayed %>%
merge(airports, by.x="ORIGIN", by.y="IATA") %>%
merge(airports, by.x="DEST", by.y="IATA")
Delayed$MONTH <- month_order[Delayed$MONTH]
month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec")
Delayed <- read_csv("pairwise_flights.csv", show_col_types=FALSE)
airports <- read_csv("airports.csv", show_col_types=FALSE)
Delayed <- na.omit(Delayed)
Delayed <- Delayed %>%
merge(airports, by.x="ORIGIN", by.y="IATA") %>%
merge(airports, by.x="DEST", by.y="IATA")
Delayed$MONTH <- month_order[Delayed$MONTH]
View(Delayed)
origin_dest <- function(origin, destination, year){
df <- Delayed %>% filter(ORIGIN==origin, DEST==destination, YEAR==year) %>%
group_by(ORIGIN, DEST) %>%
summarise_at(vars("delayed_dep", "delayed_arr", "total_flights"), sum) %>%
ungroup()  %>%
mutate('Delayed_departure'=delayed_dep/total_flights*100,
'Delayed_arrival'=delayed_arr/total_flights*100)
return(df)
}
origin_dest('ATL','PHX','2007')
#within ui <-
#below leaflet map
plotOutput("delay_bar"),
**Wait for the all the commands in orange to be executed, will take around 5 mins**
runApp('app_new.R')
View(df)
runApp('app_new.R')
runApp('app_new.R')
